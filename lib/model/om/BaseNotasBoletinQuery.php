<?php


/**
 * Base class that represents a query for the 'notas_boletin' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.5.3 on:
 *
 * Wed Dec  8 10:38:18 2010
 *
 * @method     NotasBoletinQuery orderByNotasBoletinId($order = Criteria::ASC) Order by the notas_boletin_id column
 * @method     NotasBoletinQuery orderByBoletinId($order = Criteria::ASC) Order by the boletin_id column
 * @method     NotasBoletinQuery orderByPostId($order = Criteria::ASC) Order by the post_id column
 * @method     NotasBoletinQuery orderByEsPrincipal($order = Criteria::ASC) Order by the es_principal column
 * @method     NotasBoletinQuery orderByOrden($order = Criteria::ASC) Order by the orden column
 * @method     NotasBoletinQuery orderByCreatedAt($order = Criteria::ASC) Order by the created_at column
 *
 * @method     NotasBoletinQuery groupByNotasBoletinId() Group by the notas_boletin_id column
 * @method     NotasBoletinQuery groupByBoletinId() Group by the boletin_id column
 * @method     NotasBoletinQuery groupByPostId() Group by the post_id column
 * @method     NotasBoletinQuery groupByEsPrincipal() Group by the es_principal column
 * @method     NotasBoletinQuery groupByOrden() Group by the orden column
 * @method     NotasBoletinQuery groupByCreatedAt() Group by the created_at column
 *
 * @method     NotasBoletinQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method     NotasBoletinQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method     NotasBoletinQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method     NotasBoletinQuery leftJoinBoletin($relationAlias = null) Adds a LEFT JOIN clause to the query using the Boletin relation
 * @method     NotasBoletinQuery rightJoinBoletin($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Boletin relation
 * @method     NotasBoletinQuery innerJoinBoletin($relationAlias = null) Adds a INNER JOIN clause to the query using the Boletin relation
 *
 * @method     NotasBoletinQuery leftJoinPost($relationAlias = null) Adds a LEFT JOIN clause to the query using the Post relation
 * @method     NotasBoletinQuery rightJoinPost($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Post relation
 * @method     NotasBoletinQuery innerJoinPost($relationAlias = null) Adds a INNER JOIN clause to the query using the Post relation
 *
 * @method     NotasBoletin findOne(PropelPDO $con = null) Return the first NotasBoletin matching the query
 * @method     NotasBoletin findOneOrCreate(PropelPDO $con = null) Return the first NotasBoletin matching the query, or a new NotasBoletin object populated from the query conditions when no match is found
 *
 * @method     NotasBoletin findOneByNotasBoletinId(int $notas_boletin_id) Return the first NotasBoletin filtered by the notas_boletin_id column
 * @method     NotasBoletin findOneByBoletinId(int $boletin_id) Return the first NotasBoletin filtered by the boletin_id column
 * @method     NotasBoletin findOneByPostId(int $post_id) Return the first NotasBoletin filtered by the post_id column
 * @method     NotasBoletin findOneByEsPrincipal(boolean $es_principal) Return the first NotasBoletin filtered by the es_principal column
 * @method     NotasBoletin findOneByOrden(int $orden) Return the first NotasBoletin filtered by the orden column
 * @method     NotasBoletin findOneByCreatedAt(string $created_at) Return the first NotasBoletin filtered by the created_at column
 *
 * @method     array findByNotasBoletinId(int $notas_boletin_id) Return NotasBoletin objects filtered by the notas_boletin_id column
 * @method     array findByBoletinId(int $boletin_id) Return NotasBoletin objects filtered by the boletin_id column
 * @method     array findByPostId(int $post_id) Return NotasBoletin objects filtered by the post_id column
 * @method     array findByEsPrincipal(boolean $es_principal) Return NotasBoletin objects filtered by the es_principal column
 * @method     array findByOrden(int $orden) Return NotasBoletin objects filtered by the orden column
 * @method     array findByCreatedAt(string $created_at) Return NotasBoletin objects filtered by the created_at column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseNotasBoletinQuery extends ModelCriteria
{

	/**
	 * Initializes internal state of BaseNotasBoletinQuery object.
	 *
	 * @param     string $dbName The dabase name
	 * @param     string $modelName The phpName of a model, e.g. 'Book'
	 * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
	 */
	public function __construct($dbName = 'propel', $modelName = 'NotasBoletin', $modelAlias = null)
	{
		parent::__construct($dbName, $modelName, $modelAlias);
	}

	/**
	 * Returns a new NotasBoletinQuery object.
	 *
	 * @param     string $modelAlias The alias of a model in the query
	 * @param     Criteria $criteria Optional Criteria to build the query from
	 *
	 * @return    NotasBoletinQuery
	 */
	public static function create($modelAlias = null, $criteria = null)
	{
		if ($criteria instanceof NotasBoletinQuery) {
			return $criteria;
		}
		$query = new NotasBoletinQuery();
		if (null !== $modelAlias) {
			$query->setModelAlias($modelAlias);
		}
		if ($criteria instanceof Criteria) {
			$query->mergeWith($criteria);
		}
		return $query;
	}

	/**
	 * Find object by primary key
	 * Use instance pooling to avoid a database query if the object exists
	 * <code>
	 * $obj  = $c->findPk(12, $con);
	 * </code>
	 * @param     mixed $key Primary key to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    NotasBoletin|array|mixed the result, formatted by the current formatter
	 */
	public function findPk($key, $con = null)
	{
		if ((null !== ($obj = NotasBoletinPeer::getInstanceFromPool((string) $key))) && $this->getFormatter()->isObjectFormatter()) {
			// the object is alredy in the instance pool
			return $obj;
		} else {
			// the object has not been requested yet, or the formatter is not an object formatter
			$criteria = $this->isKeepQuery() ? clone $this : $this;
			$stmt = $criteria
				->filterByPrimaryKey($key)
				->getSelectStatement($con);
			return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
		}
	}

	/**
	 * Find objects by primary key
	 * <code>
	 * $objs = $c->findPks(array(12, 56, 832), $con);
	 * </code>
	 * @param     array $keys Primary keys to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    PropelObjectCollection|array|mixed the list of results, formatted by the current formatter
	 */
	public function findPks($keys, $con = null)
	{	
		$criteria = $this->isKeepQuery() ? clone $this : $this;
		return $this
			->filterByPrimaryKeys($keys)
			->find($con);
	}

	/**
	 * Filter the query by primary key
	 *
	 * @param     mixed $key Primary key to use for the query
	 *
	 * @return    NotasBoletinQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKey($key)
	{
		return $this->addUsingAlias(NotasBoletinPeer::NOTAS_BOLETIN_ID, $key, Criteria::EQUAL);
	}

	/**
	 * Filter the query by a list of primary keys
	 *
	 * @param     array $keys The list of primary key to use for the query
	 *
	 * @return    NotasBoletinQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKeys($keys)
	{
		return $this->addUsingAlias(NotasBoletinPeer::NOTAS_BOLETIN_ID, $keys, Criteria::IN);
	}

	/**
	 * Filter the query on the notas_boletin_id column
	 * 
	 * @param     int|array $notasBoletinId The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    NotasBoletinQuery The current query, for fluid interface
	 */
	public function filterByNotasBoletinId($notasBoletinId = null, $comparison = null)
	{
		if (is_array($notasBoletinId) && null === $comparison) {
			$comparison = Criteria::IN;
		}
		return $this->addUsingAlias(NotasBoletinPeer::NOTAS_BOLETIN_ID, $notasBoletinId, $comparison);
	}

	/**
	 * Filter the query on the boletin_id column
	 * 
	 * @param     int|array $boletinId The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    NotasBoletinQuery The current query, for fluid interface
	 */
	public function filterByBoletinId($boletinId = null, $comparison = null)
	{
		if (is_array($boletinId)) {
			$useMinMax = false;
			if (isset($boletinId['min'])) {
				$this->addUsingAlias(NotasBoletinPeer::BOLETIN_ID, $boletinId['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($boletinId['max'])) {
				$this->addUsingAlias(NotasBoletinPeer::BOLETIN_ID, $boletinId['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(NotasBoletinPeer::BOLETIN_ID, $boletinId, $comparison);
	}

	/**
	 * Filter the query on the post_id column
	 * 
	 * @param     int|array $postId The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    NotasBoletinQuery The current query, for fluid interface
	 */
	public function filterByPostId($postId = null, $comparison = null)
	{
		if (is_array($postId)) {
			$useMinMax = false;
			if (isset($postId['min'])) {
				$this->addUsingAlias(NotasBoletinPeer::POST_ID, $postId['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($postId['max'])) {
				$this->addUsingAlias(NotasBoletinPeer::POST_ID, $postId['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(NotasBoletinPeer::POST_ID, $postId, $comparison);
	}

	/**
	 * Filter the query on the es_principal column
	 * 
	 * @param     boolean|string $esPrincipal The value to use as filter.
	 *            Accepts strings ('false', 'off', '-', 'no', 'n', and '0' are false, the rest is true)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    NotasBoletinQuery The current query, for fluid interface
	 */
	public function filterByEsPrincipal($esPrincipal = null, $comparison = null)
	{
		if (is_string($esPrincipal)) {
			$es_principal = in_array(strtolower($esPrincipal), array('false', 'off', '-', 'no', 'n', '0')) ? false : true;
		}
		return $this->addUsingAlias(NotasBoletinPeer::ES_PRINCIPAL, $esPrincipal, $comparison);
	}

	/**
	 * Filter the query on the orden column
	 * 
	 * @param     int|array $orden The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    NotasBoletinQuery The current query, for fluid interface
	 */
	public function filterByOrden($orden = null, $comparison = null)
	{
		if (is_array($orden)) {
			$useMinMax = false;
			if (isset($orden['min'])) {
				$this->addUsingAlias(NotasBoletinPeer::ORDEN, $orden['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($orden['max'])) {
				$this->addUsingAlias(NotasBoletinPeer::ORDEN, $orden['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(NotasBoletinPeer::ORDEN, $orden, $comparison);
	}

	/**
	 * Filter the query on the created_at column
	 * 
	 * @param     string|array $createdAt The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    NotasBoletinQuery The current query, for fluid interface
	 */
	public function filterByCreatedAt($createdAt = null, $comparison = null)
	{
		if (is_array($createdAt)) {
			$useMinMax = false;
			if (isset($createdAt['min'])) {
				$this->addUsingAlias(NotasBoletinPeer::CREATED_AT, $createdAt['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($createdAt['max'])) {
				$this->addUsingAlias(NotasBoletinPeer::CREATED_AT, $createdAt['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(NotasBoletinPeer::CREATED_AT, $createdAt, $comparison);
	}

	/**
	 * Filter the query by a related Boletin object
	 *
	 * @param     Boletin $boletin  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    NotasBoletinQuery The current query, for fluid interface
	 */
	public function filterByBoletin($boletin, $comparison = null)
	{
		return $this
			->addUsingAlias(NotasBoletinPeer::BOLETIN_ID, $boletin->getBoletinId(), $comparison);
	}

	/**
	 * Adds a JOIN clause to the query using the Boletin relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    NotasBoletinQuery The current query, for fluid interface
	 */
	public function joinBoletin($relationAlias = null, $joinType = Criteria::INNER_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Boletin');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Boletin');
		}
		
		return $this;
	}

	/**
	 * Use the Boletin relation Boletin object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    BoletinQuery A secondary query class using the current class as primary query
	 */
	public function useBoletinQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
	{
		return $this
			->joinBoletin($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Boletin', 'BoletinQuery');
	}

	/**
	 * Filter the query by a related Post object
	 *
	 * @param     Post $post  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    NotasBoletinQuery The current query, for fluid interface
	 */
	public function filterByPost($post, $comparison = null)
	{
		return $this
			->addUsingAlias(NotasBoletinPeer::POST_ID, $post->getPostId(), $comparison);
	}

	/**
	 * Adds a JOIN clause to the query using the Post relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    NotasBoletinQuery The current query, for fluid interface
	 */
	public function joinPost($relationAlias = null, $joinType = Criteria::INNER_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Post');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Post');
		}
		
		return $this;
	}

	/**
	 * Use the Post relation Post object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    PostQuery A secondary query class using the current class as primary query
	 */
	public function usePostQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
	{
		return $this
			->joinPost($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Post', 'PostQuery');
	}

	/**
	 * Exclude object from result
	 *
	 * @param     NotasBoletin $notasBoletin Object to remove from the list of results
	 *
	 * @return    NotasBoletinQuery The current query, for fluid interface
	 */
	public function prune($notasBoletin = null)
	{
		if ($notasBoletin) {
			$this->addUsingAlias(NotasBoletinPeer::NOTAS_BOLETIN_ID, $notasBoletin->getNotasBoletinId(), Criteria::NOT_EQUAL);
	  }
	  
		return $this;
	}

} // BaseNotasBoletinQuery
